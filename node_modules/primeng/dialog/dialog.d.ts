import { ElementRef, OnDestroy, EventEmitter, Renderer2, QueryList, NgZone, ChangeDetectorRef, AfterContentInit, TemplateRef, OnInit } from '@angular/core';
import { AnimationEvent } from '@angular/animations';
import { Header, Footer, PrimeNGConfig } from 'primeng/api';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "primeng/focustrap";
import * as i3 from "primeng/ripple";
import * as i4 from "primeng/icons/times";
import * as i5 from "primeng/icons/windowmaximize";
import * as i6 from "primeng/icons/windowminimize";
import * as i7 from "primeng/api";
export declare class Dialog implements AfterContentInit, OnInit, OnDestroy {
    private document;
    private platformId;
    el: ElementRef;
    renderer: Renderer2;
    zone: NgZone;
    private cd;
    config: PrimeNGConfig;
    header: string;
    draggable: boolean;
    resizable: boolean;
    get positionLeft(): number;
    set positionLeft(_positionLeft: number);
    get positionTop(): number;
    set positionTop(_positionTop: number);
    contentStyle: any;
    contentStyleClass: string;
    modal: boolean;
    closeOnEscape: boolean;
    dismissableMask: boolean;
    rtl: boolean;
    closable: boolean;
    get responsive(): boolean;
    set responsive(_responsive: boolean);
    appendTo: any;
    breakpoints: any;
    styleClass: string;
    maskStyleClass: string;
    showHeader: boolean;
    get breakpoint(): number;
    set breakpoint(_breakpoint: number);
    blockScroll: boolean;
    autoZIndex: boolean;
    baseZIndex: number;
    minX: number;
    minY: number;
    focusOnShow: boolean;
    maximizable: boolean;
    keepInViewport: boolean;
    focusTrap: boolean;
    transitionOptions: string;
    closeIcon: string;
    closeAriaLabel: string;
    closeTabindex: string;
    minimizeIcon: string;
    maximizeIcon: string;
    headerFacet: QueryList<Header>;
    footerFacet: QueryList<Footer>;
    templates: QueryList<any>;
    headerViewChild: ElementRef;
    contentViewChild: ElementRef;
    footerViewChild: ElementRef;
    onShow: EventEmitter<any>;
    onHide: EventEmitter<any>;
    visibleChange: EventEmitter<any>;
    onResizeInit: EventEmitter<any>;
    onResizeEnd: EventEmitter<any>;
    onDragEnd: EventEmitter<any>;
    onMaximize: EventEmitter<any>;
    headerTemplate: TemplateRef<any>;
    contentTemplate: TemplateRef<any>;
    footerTemplate: TemplateRef<any>;
    maximizeIconTemplate: TemplateRef<any>;
    closeIconTemplate: TemplateRef<any>;
    minimizeIconTemplate: TemplateRef<any>;
    _visible: boolean;
    maskVisible: boolean;
    container: HTMLDivElement;
    wrapper: HTMLElement;
    dragging: boolean;
    documentDragListener: VoidFunction | null;
    documentDragEndListener: VoidFunction | null;
    resizing: boolean;
    documentResizeListener: VoidFunction | null;
    documentResizeEndListener: VoidFunction | null;
    documentEscapeListener: VoidFunction | null;
    maskClickListener: VoidFunction | null;
    lastPageX: number;
    lastPageY: number;
    preventVisibleChangePropagation: boolean;
    maximized: boolean;
    preMaximizeContentHeight: number;
    preMaximizeContainerWidth: number;
    preMaximizeContainerHeight: number;
    preMaximizePageX: number;
    preMaximizePageY: number;
    id: string;
    _style: any;
    _position: string;
    originalStyle: any;
    transformOptions: any;
    styleElement: any;
    private window;
    constructor(document: Document, platformId: any, el: ElementRef, renderer: Renderer2, zone: NgZone, cd: ChangeDetectorRef, config: PrimeNGConfig);
    ngAfterContentInit(): void;
    ngOnInit(): void;
    get visible(): any;
    set visible(value: any);
    get style(): any;
    set style(value: any);
    get position(): string;
    set position(value: string);
    focus(): void;
    close(event: Event): void;
    enableModality(): void;
    disableModality(): void;
    maximize(): void;
    unbindMaskClickListener(): void;
    moveOnTop(): void;
    createStyle(): void;
    initDrag(event: MouseEvent): void;
    onKeydown(event: KeyboardEvent): void;
    onDrag(event: MouseEvent): void;
    endDrag(event: MouseEvent): void;
    resetPosition(): void;
    center(): void;
    initResize(event: MouseEvent): void;
    onResize(event: MouseEvent): void;
    resizeEnd(event: any): void;
    bindGlobalListeners(): void;
    unbindGlobalListeners(): void;
    bindDocumentDragListener(): void;
    unbindDocumentDragListener(): void;
    bindDocumentDragEndListener(): void;
    unbindDocumentDragEndListener(): void;
    bindDocumentResizeListeners(): void;
    unbindDocumentResizeListeners(): void;
    bindDocumentEscapeListener(): void;
    unbindDocumentEscapeListener(): void;
    appendContainer(): void;
    restoreAppend(): void;
    onAnimationStart(event: AnimationEvent): void;
    onAnimationEnd(event: AnimationEvent): void;
    onContainerDestroy(): void;
    destroyStyle(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<Dialog, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<Dialog, "p-dialog", never, { "header": { "alias": "header"; "required": false; }; "draggable": { "alias": "draggable"; "required": false; }; "resizable": { "alias": "resizable"; "required": false; }; "positionLeft": { "alias": "positionLeft"; "required": false; }; "positionTop": { "alias": "positionTop"; "required": false; }; "contentStyle": { "alias": "contentStyle"; "required": false; }; "contentStyleClass": { "alias": "contentStyleClass"; "required": false; }; "modal": { "alias": "modal"; "required": false; }; "closeOnEscape": { "alias": "closeOnEscape"; "required": false; }; "dismissableMask": { "alias": "dismissableMask"; "required": false; }; "rtl": { "alias": "rtl"; "required": false; }; "closable": { "alias": "closable"; "required": false; }; "responsive": { "alias": "responsive"; "required": false; }; "appendTo": { "alias": "appendTo"; "required": false; }; "breakpoints": { "alias": "breakpoints"; "required": false; }; "styleClass": { "alias": "styleClass"; "required": false; }; "maskStyleClass": { "alias": "maskStyleClass"; "required": false; }; "showHeader": { "alias": "showHeader"; "required": false; }; "breakpoint": { "alias": "breakpoint"; "required": false; }; "blockScroll": { "alias": "blockScroll"; "required": false; }; "autoZIndex": { "alias": "autoZIndex"; "required": false; }; "baseZIndex": { "alias": "baseZIndex"; "required": false; }; "minX": { "alias": "minX"; "required": false; }; "minY": { "alias": "minY"; "required": false; }; "focusOnShow": { "alias": "focusOnShow"; "required": false; }; "maximizable": { "alias": "maximizable"; "required": false; }; "keepInViewport": { "alias": "keepInViewport"; "required": false; }; "focusTrap": { "alias": "focusTrap"; "required": false; }; "transitionOptions": { "alias": "transitionOptions"; "required": false; }; "closeIcon": { "alias": "closeIcon"; "required": false; }; "closeAriaLabel": { "alias": "closeAriaLabel"; "required": false; }; "closeTabindex": { "alias": "closeTabindex"; "required": false; }; "minimizeIcon": { "alias": "minimizeIcon"; "required": false; }; "maximizeIcon": { "alias": "maximizeIcon"; "required": false; }; "visible": { "alias": "visible"; "required": false; }; "style": { "alias": "style"; "required": false; }; "position": { "alias": "position"; "required": false; }; }, { "onShow": "onShow"; "onHide": "onHide"; "visibleChange": "visibleChange"; "onResizeInit": "onResizeInit"; "onResizeEnd": "onResizeEnd"; "onDragEnd": "onDragEnd"; "onMaximize": "onMaximize"; }, ["headerFacet", "footerFacet", "templates"], ["p-header", "*", "p-footer"], false, never>;
}
export declare class DialogModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DialogModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DialogModule, [typeof Dialog], [typeof i1.CommonModule, typeof i2.FocusTrapModule, typeof i3.RippleModule, typeof i4.TimesIcon, typeof i5.WindowMaximizeIcon, typeof i6.WindowMinimizeIcon], [typeof Dialog, typeof i7.SharedModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DialogModule>;
}
