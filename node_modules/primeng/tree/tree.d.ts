import { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, QueryList, SimpleChanges, TemplateRef } from '@angular/core';
import { BlockableUI, PrimeNGConfig, TreeDragDropService, TreeNode } from 'primeng/api';
import { Scroller, ScrollerOptions } from 'primeng/scroller';
import { Subscription } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "primeng/api";
import * as i3 from "primeng/ripple";
import * as i4 from "primeng/scroller";
import * as i5 from "primeng/icons/check";
import * as i6 from "primeng/icons/chevrondown";
import * as i7 from "primeng/icons/chevronright";
import * as i8 from "primeng/icons/minus";
import * as i9 from "primeng/icons/search";
import * as i10 from "primeng/icons/spinner";
export declare class UITreeNode implements OnInit {
    static ICON_CLASS: string;
    rowNode: any;
    node: TreeNode;
    parentNode: TreeNode;
    root: boolean;
    index: number;
    firstChild: boolean;
    lastChild: boolean;
    level: number;
    indentation: number;
    itemSize: number;
    tree: Tree;
    timeout: any;
    constructor(tree: any);
    draghoverPrev: boolean;
    draghoverNext: boolean;
    draghoverNode: boolean;
    ngOnInit(): void;
    getIcon(): string;
    isLeaf(): boolean;
    toggle(event: Event): void;
    expand(event: Event): void;
    collapse(event: Event): void;
    onNodeClick(event: MouseEvent): void;
    onNodeKeydown(event: KeyboardEvent): void;
    onNodeTouchEnd(): void;
    onNodeRightClick(event: MouseEvent): void;
    isSelected(): boolean;
    onDropPoint(event: Event, position: number): void;
    processPointDrop(event: any): void;
    createDropPointEventMetadata(position: any): {
        dragNode: TreeNode<any>;
        dragNodeIndex: number;
        dragNodeSubNodes: TreeNode<any>[];
        dropNode: TreeNode<any>;
        index: number;
        position: any;
    };
    onDropPointDragOver(event: any): void;
    onDropPointDragEnter(event: Event, position: number): void;
    onDropPointDragLeave(event: Event): void;
    onDragStart(event: any): void;
    onDragStop(event: any): void;
    onDropNodeDragOver(event: any): void;
    onDropNode(event: any): void;
    createDropNodeEventMetadata(): {
        dragNode: TreeNode<any>;
        dragNodeIndex: number;
        dragNodeSubNodes: TreeNode<any>[];
        dropNode: TreeNode<any>;
    };
    processNodeDrop(event: any): void;
    onDropNodeDragEnter(event: any): void;
    onDropNodeDragLeave(event: any): void;
    onKeyDown(event: KeyboardEvent): void;
    findNextSiblingOfAncestor(nodeElement: any): any;
    findLastVisibleDescendant(nodeElement: any): any;
    getParentNodeElement(nodeElement: any): any;
    focusNode(element: any): void;
    focusVirtualNode(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<UITreeNode, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<UITreeNode, "p-treeNode", never, { "rowNode": { "alias": "rowNode"; "required": false; }; "node": { "alias": "node"; "required": false; }; "parentNode": { "alias": "parentNode"; "required": false; }; "root": { "alias": "root"; "required": false; }; "index": { "alias": "index"; "required": false; }; "firstChild": { "alias": "firstChild"; "required": false; }; "lastChild": { "alias": "lastChild"; "required": false; }; "level": { "alias": "level"; "required": false; }; "indentation": { "alias": "indentation"; "required": false; }; "itemSize": { "alias": "itemSize"; "required": false; }; }, {}, never, never, false, never>;
}
export declare class Tree implements OnInit, AfterContentInit, OnChanges, OnDestroy, BlockableUI {
    el: ElementRef;
    dragDropService: TreeDragDropService;
    config: PrimeNGConfig;
    private cd;
    value: TreeNode[];
    selectionMode: string;
    selection: any;
    style: any;
    styleClass: string;
    contextMenu: any;
    layout: string;
    draggableScope: any;
    droppableScope: any;
    draggableNodes: boolean;
    droppableNodes: boolean;
    metaKeySelection: boolean;
    propagateSelectionUp: boolean;
    propagateSelectionDown: boolean;
    loading: boolean;
    loadingIcon: string;
    emptyMessage: string;
    ariaLabel: string;
    togglerAriaLabel: string;
    ariaLabelledBy: string;
    validateDrop: boolean;
    filter: boolean;
    filterBy: string;
    filterMode: string;
    filterPlaceholder: string;
    filteredNodes: TreeNode[];
    filterLocale: string;
    scrollHeight: string;
    lazy: boolean;
    virtualScroll: boolean;
    virtualScrollItemSize: number;
    virtualScrollOptions: ScrollerOptions;
    indentation: number;
    _templateMap: any;
    trackBy: Function;
    selectionChange: EventEmitter<any>;
    onNodeSelect: EventEmitter<any>;
    onNodeUnselect: EventEmitter<any>;
    onNodeExpand: EventEmitter<any>;
    onNodeCollapse: EventEmitter<any>;
    onNodeContextMenuSelect: EventEmitter<any>;
    onNodeDrop: EventEmitter<any>;
    onLazyLoad: EventEmitter<any>;
    onScroll: EventEmitter<any>;
    onScrollIndexChange: EventEmitter<any>;
    onFilter: EventEmitter<any>;
    templates: QueryList<any>;
    filterViewChild: ElementRef;
    scroller: Scroller;
    wrapperViewChild: ElementRef;
    _virtualNodeHeight: number;
    get virtualNodeHeight(): number;
    set virtualNodeHeight(val: number);
    serializedValue: any[];
    headerTemplate: TemplateRef<any>;
    footerTemplate: TemplateRef<any>;
    loaderTemplate: TemplateRef<any>;
    emptyMessageTemplate: TemplateRef<any>;
    togglerIconTemplate: TemplateRef<any>;
    checkboxIconTemplate: TemplateRef<any>;
    loadingIconTemplate: TemplateRef<any>;
    filterIconTemplate: TemplateRef<any>;
    nodeTouched: boolean;
    dragNodeTree: Tree;
    dragNode: TreeNode;
    dragNodeSubNodes: TreeNode[];
    dragNodeIndex: number;
    dragNodeScope: any;
    dragHover: boolean;
    dragStartSubscription: Subscription;
    dragStopSubscription: Subscription;
    constructor(el: ElementRef, dragDropService: TreeDragDropService, config: PrimeNGConfig, cd: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnChanges(simpleChange: SimpleChanges): void;
    get horizontal(): boolean;
    get emptyMessageLabel(): string;
    ngAfterContentInit(): void;
    updateSerializedValue(): void;
    serializeNodes(parent: any, nodes: any, level: any, visible: any): void;
    onNodeClick(event: any, node: TreeNode): void;
    onNodeTouchEnd(): void;
    onNodeRightClick(event: MouseEvent, node: TreeNode): void;
    findIndexInSelection(node: TreeNode): number;
    syncNodeOption(node: any, parentNodes: any, option: any, value?: any): void;
    hasFilteredNodes(): number;
    getNodeWithKey(key: string, nodes: TreeNode[]): any;
    propagateUp(node: TreeNode, select: boolean): void;
    propagateDown(node: TreeNode, select: boolean): void;
    isSelected(node: TreeNode): boolean;
    isSingleSelectionMode(): boolean;
    isMultipleSelectionMode(): boolean;
    isCheckboxSelectionMode(): boolean;
    isNodeLeaf(node: any): boolean;
    getRootNode(): TreeNode<any>[];
    getTemplateForNode(node: TreeNode): TemplateRef<any>;
    onDragOver(event: any): void;
    onDrop(event: any): void;
    processTreeDrop(dragNode: any, dragNodeIndex: any): void;
    onDragEnter(): void;
    onDragLeave(event: any): void;
    allowDrop(dragNode: TreeNode, dropNode: TreeNode, dragNodeScope: any): boolean;
    isValidDragScope(dragScope: any): boolean;
    _filter(value: any): void;
    resetFilter(): void;
    scrollToVirtualIndex(index: number): void;
    scrollTo(options: any): void;
    findFilteredNodes(node: any, paramsWithoutNode: any): boolean;
    isFilterMatched(node: any, { searchFields, filterText, isStrictMode }: {
        searchFields: any;
        filterText: any;
        isStrictMode: any;
    }): boolean;
    getIndex(options: any, index: any): any;
    getBlockableElement(): HTMLElement;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<Tree, [null, { optional: true; }, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<Tree, "p-tree", never, { "value": { "alias": "value"; "required": false; }; "selectionMode": { "alias": "selectionMode"; "required": false; }; "selection": { "alias": "selection"; "required": false; }; "style": { "alias": "style"; "required": false; }; "styleClass": { "alias": "styleClass"; "required": false; }; "contextMenu": { "alias": "contextMenu"; "required": false; }; "layout": { "alias": "layout"; "required": false; }; "draggableScope": { "alias": "draggableScope"; "required": false; }; "droppableScope": { "alias": "droppableScope"; "required": false; }; "draggableNodes": { "alias": "draggableNodes"; "required": false; }; "droppableNodes": { "alias": "droppableNodes"; "required": false; }; "metaKeySelection": { "alias": "metaKeySelection"; "required": false; }; "propagateSelectionUp": { "alias": "propagateSelectionUp"; "required": false; }; "propagateSelectionDown": { "alias": "propagateSelectionDown"; "required": false; }; "loading": { "alias": "loading"; "required": false; }; "loadingIcon": { "alias": "loadingIcon"; "required": false; }; "emptyMessage": { "alias": "emptyMessage"; "required": false; }; "ariaLabel": { "alias": "ariaLabel"; "required": false; }; "togglerAriaLabel": { "alias": "togglerAriaLabel"; "required": false; }; "ariaLabelledBy": { "alias": "ariaLabelledBy"; "required": false; }; "validateDrop": { "alias": "validateDrop"; "required": false; }; "filter": { "alias": "filter"; "required": false; }; "filterBy": { "alias": "filterBy"; "required": false; }; "filterMode": { "alias": "filterMode"; "required": false; }; "filterPlaceholder": { "alias": "filterPlaceholder"; "required": false; }; "filteredNodes": { "alias": "filteredNodes"; "required": false; }; "filterLocale": { "alias": "filterLocale"; "required": false; }; "scrollHeight": { "alias": "scrollHeight"; "required": false; }; "lazy": { "alias": "lazy"; "required": false; }; "virtualScroll": { "alias": "virtualScroll"; "required": false; }; "virtualScrollItemSize": { "alias": "virtualScrollItemSize"; "required": false; }; "virtualScrollOptions": { "alias": "virtualScrollOptions"; "required": false; }; "indentation": { "alias": "indentation"; "required": false; }; "_templateMap": { "alias": "_templateMap"; "required": false; }; "trackBy": { "alias": "trackBy"; "required": false; }; "virtualNodeHeight": { "alias": "virtualNodeHeight"; "required": false; }; }, { "selectionChange": "selectionChange"; "onNodeSelect": "onNodeSelect"; "onNodeUnselect": "onNodeUnselect"; "onNodeExpand": "onNodeExpand"; "onNodeCollapse": "onNodeCollapse"; "onNodeContextMenuSelect": "onNodeContextMenuSelect"; "onNodeDrop": "onNodeDrop"; "onLazyLoad": "onLazyLoad"; "onScroll": "onScroll"; "onScrollIndexChange": "onScrollIndexChange"; "onFilter": "onFilter"; }, ["templates"], never, false, never>;
}
export declare class TreeModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<TreeModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<TreeModule, [typeof Tree, typeof UITreeNode], [typeof i1.CommonModule, typeof i2.SharedModule, typeof i3.RippleModule, typeof i4.ScrollerModule, typeof i5.CheckIcon, typeof i6.ChevronDownIcon, typeof i7.ChevronRightIcon, typeof i8.MinusIcon, typeof i9.SearchIcon, typeof i10.SpinnerIcon], [typeof Tree, typeof i2.SharedModule, typeof i4.ScrollerModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<TreeModule>;
}
